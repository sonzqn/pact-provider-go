#!groovy
pipeline {

  agent any

  tools {
    jdk 'jdk 8'
    maven 'mvn 3.8'
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
  }

  environment {
    SERVICE_NAME = "provider-java"
    BRANCH_NAME = env.GIT_BRANCH.replace("origin/", "")
    PACT_URL = "http://localhost:9292"
    PACT_DOCKER_CLI = "sudo docker run \
                           -e PACT_BROKER_BASE_URL='http://localhost:9292' \
                           -e PACT_BROKER_USERNAME='pb_username' \
                           -e PACT_BROKER_PASSWORD='pb_password' \
                           --network host --rm pactfoundation/pact-cli:0.50.0.21 broker"
  }

  stages {
    stage ('Build & Test') {
      steps {
        sh "mvn clean verify -Dpactbroker.consumerversionselectors.tags=SIT_ENV -Dpact.provider.version=${GIT_COMMIT} -Dpact.provider.tag=${BRANCH_NAME} -Dpact.verifier.publishResults=true"
      }
    }
    stage('[Pact] Version & Tag Init') {
      steps {
        script {
          env.SIT_VERSION = sh(script: "${PACT_DOCKER_CLI} describe-version -a ${SERVICE_NAME} -l SIT_ENV | tail -1 | cut -f 1 -d \\|", returnStdout: true).trim()
          echo "Latest verified SIT version: " + SIT_VERSION
          if (env.SIT_VERSION == 'Pacticipant version not found' && env.BRANCH_NAME == 'master') {
            sh "${PACT_DOCKER_CLI} create-or-update-pacticipant --name=${SERVICE_NAME} --main-branch=${BRANCH_NAME} --repository-url=${GIT_URL}"
            sh "${PACT_DOCKER_CLI} create-version-tag -t SIT_ENV -a ${SERVICE_NAME} -e ${GIT_COMMIT}"
          }
        }
      }
    }
    stage('Can I deploy on SIT') {
      steps {
        sh "${PACT_DOCKER_CLI} can-i-deploy -a ${SERVICE_NAME} -e ${GIT_COMMIT} --to SIT_ENV"
      }
    }
    stage('Mark as verified on SIT') {
      steps {
        sh "${PACT_DOCKER_CLI} create-version-tag -a ${SERVICE_NAME} -e ${GIT_COMMIT} -t SIT_ENV"
      }
    }
    stage('Deploy on SIT') {
      when {
        expression { return env.BRANCH_NAME == 'master'; }
      }
      steps {
          sh "${PACT_DOCKER_CLI} record-deployment --environment=SIT -a ${SERVICE_NAME} -e ${GIT_COMMIT}"
      }
    }
  }
}